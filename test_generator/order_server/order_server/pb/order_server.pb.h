// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_order_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_order_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_order_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_order_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_5fserver_2eproto;
class deleteOrderReq;
struct deleteOrderReqDefaultTypeInternal;
extern deleteOrderReqDefaultTypeInternal _deleteOrderReq_default_instance_;
class deleteOrderRsp;
struct deleteOrderRspDefaultTypeInternal;
extern deleteOrderRspDefaultTypeInternal _deleteOrderRsp_default_instance_;
class makeOrderReq;
struct makeOrderReqDefaultTypeInternal;
extern makeOrderReqDefaultTypeInternal _makeOrderReq_default_instance_;
class makeOrderRsp;
struct makeOrderRspDefaultTypeInternal;
extern makeOrderRspDefaultTypeInternal _makeOrderRsp_default_instance_;
class queryOrderDetailReq;
struct queryOrderDetailReqDefaultTypeInternal;
extern queryOrderDetailReqDefaultTypeInternal _queryOrderDetailReq_default_instance_;
class queryOrderDetailRsp;
struct queryOrderDetailRspDefaultTypeInternal;
extern queryOrderDetailRspDefaultTypeInternal _queryOrderDetailRsp_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::deleteOrderReq* Arena::CreateMaybeMessage<::deleteOrderReq>(Arena*);
template<> ::deleteOrderRsp* Arena::CreateMaybeMessage<::deleteOrderRsp>(Arena*);
template<> ::makeOrderReq* Arena::CreateMaybeMessage<::makeOrderReq>(Arena*);
template<> ::makeOrderRsp* Arena::CreateMaybeMessage<::makeOrderRsp>(Arena*);
template<> ::queryOrderDetailReq* Arena::CreateMaybeMessage<::queryOrderDetailReq>(Arena*);
template<> ::queryOrderDetailRsp* Arena::CreateMaybeMessage<::queryOrderDetailRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class queryOrderDetailReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:queryOrderDetailReq) */ {
 public:
  inline queryOrderDetailReq() : queryOrderDetailReq(nullptr) {}
  ~queryOrderDetailReq() override;
  explicit constexpr queryOrderDetailReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  queryOrderDetailReq(const queryOrderDetailReq& from);
  queryOrderDetailReq(queryOrderDetailReq&& from) noexcept
    : queryOrderDetailReq() {
    *this = ::std::move(from);
  }

  inline queryOrderDetailReq& operator=(const queryOrderDetailReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryOrderDetailReq& operator=(queryOrderDetailReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queryOrderDetailReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const queryOrderDetailReq* internal_default_instance() {
    return reinterpret_cast<const queryOrderDetailReq*>(
               &_queryOrderDetailReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(queryOrderDetailReq& a, queryOrderDetailReq& b) {
    a.Swap(&b);
  }
  inline void Swap(queryOrderDetailReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queryOrderDetailReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  queryOrderDetailReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<queryOrderDetailReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const queryOrderDetailReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const queryOrderDetailReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryOrderDetailReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "queryOrderDetailReq";
  }
  protected:
  explicit queryOrderDetailReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 2,
    kReqNoFieldNumber = 1,
  };
  // string order_id = 2;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // int32 req_no = 1;
  void clear_req_no();
  int32_t req_no() const;
  void set_req_no(int32_t value);
  private:
  int32_t _internal_req_no() const;
  void _internal_set_req_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:queryOrderDetailReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  int32_t req_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fserver_2eproto;
};
// -------------------------------------------------------------------

class queryOrderDetailRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:queryOrderDetailRsp) */ {
 public:
  inline queryOrderDetailRsp() : queryOrderDetailRsp(nullptr) {}
  ~queryOrderDetailRsp() override;
  explicit constexpr queryOrderDetailRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  queryOrderDetailRsp(const queryOrderDetailRsp& from);
  queryOrderDetailRsp(queryOrderDetailRsp&& from) noexcept
    : queryOrderDetailRsp() {
    *this = ::std::move(from);
  }

  inline queryOrderDetailRsp& operator=(const queryOrderDetailRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryOrderDetailRsp& operator=(queryOrderDetailRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queryOrderDetailRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const queryOrderDetailRsp* internal_default_instance() {
    return reinterpret_cast<const queryOrderDetailRsp*>(
               &_queryOrderDetailRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(queryOrderDetailRsp& a, queryOrderDetailRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(queryOrderDetailRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queryOrderDetailRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  queryOrderDetailRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<queryOrderDetailRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const queryOrderDetailRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const queryOrderDetailRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryOrderDetailRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "queryOrderDetailRsp";
  }
  protected:
  explicit queryOrderDetailRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kOrderIdFieldNumber = 4,
    kGoodsNameFieldNumber = 5,
    kUserNameFieldNumber = 6,
    kRetCodeFieldNumber = 1,
    kReqNoFieldNumber = 3,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_info();
  PROTOBUF_NODISCARD std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // string order_id = 4;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string goods_name = 5;
  void clear_goods_name();
  const std::string& goods_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_goods_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_goods_name();
  PROTOBUF_NODISCARD std::string* release_goods_name();
  void set_allocated_goods_name(std::string* goods_name);
  private:
  const std::string& _internal_goods_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_goods_name(const std::string& value);
  std::string* _internal_mutable_goods_name();
  public:

  // string user_name = 6;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // int32 req_no = 3;
  void clear_req_no();
  int32_t req_no() const;
  void set_req_no(int32_t value);
  private:
  int32_t _internal_req_no() const;
  void _internal_set_req_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:queryOrderDetailRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goods_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  int32_t ret_code_;
  int32_t req_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fserver_2eproto;
};
// -------------------------------------------------------------------

class makeOrderReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:makeOrderReq) */ {
 public:
  inline makeOrderReq() : makeOrderReq(nullptr) {}
  ~makeOrderReq() override;
  explicit constexpr makeOrderReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  makeOrderReq(const makeOrderReq& from);
  makeOrderReq(makeOrderReq&& from) noexcept
    : makeOrderReq() {
    *this = ::std::move(from);
  }

  inline makeOrderReq& operator=(const makeOrderReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline makeOrderReq& operator=(makeOrderReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const makeOrderReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const makeOrderReq* internal_default_instance() {
    return reinterpret_cast<const makeOrderReq*>(
               &_makeOrderReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(makeOrderReq& a, makeOrderReq& b) {
    a.Swap(&b);
  }
  inline void Swap(makeOrderReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(makeOrderReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  makeOrderReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<makeOrderReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const makeOrderReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const makeOrderReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(makeOrderReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "makeOrderReq";
  }
  protected:
  explicit makeOrderReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kGoodsNameFieldNumber = 3,
    kPayAmountFieldNumber = 4,
    kReqNoFieldNumber = 1,
  };
  // string user = 2;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string goods_name = 3;
  void clear_goods_name();
  const std::string& goods_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_goods_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_goods_name();
  PROTOBUF_NODISCARD std::string* release_goods_name();
  void set_allocated_goods_name(std::string* goods_name);
  private:
  const std::string& _internal_goods_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_goods_name(const std::string& value);
  std::string* _internal_mutable_goods_name();
  public:

  // string pay_amount = 4;
  void clear_pay_amount();
  const std::string& pay_amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pay_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pay_amount();
  PROTOBUF_NODISCARD std::string* release_pay_amount();
  void set_allocated_pay_amount(std::string* pay_amount);
  private:
  const std::string& _internal_pay_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pay_amount(const std::string& value);
  std::string* _internal_mutable_pay_amount();
  public:

  // int32 req_no = 1;
  void clear_req_no();
  int32_t req_no() const;
  void set_req_no(int32_t value);
  private:
  int32_t _internal_req_no() const;
  void _internal_set_req_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:makeOrderReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goods_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pay_amount_;
  int32_t req_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fserver_2eproto;
};
// -------------------------------------------------------------------

class makeOrderRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:makeOrderRsp) */ {
 public:
  inline makeOrderRsp() : makeOrderRsp(nullptr) {}
  ~makeOrderRsp() override;
  explicit constexpr makeOrderRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  makeOrderRsp(const makeOrderRsp& from);
  makeOrderRsp(makeOrderRsp&& from) noexcept
    : makeOrderRsp() {
    *this = ::std::move(from);
  }

  inline makeOrderRsp& operator=(const makeOrderRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline makeOrderRsp& operator=(makeOrderRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const makeOrderRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const makeOrderRsp* internal_default_instance() {
    return reinterpret_cast<const makeOrderRsp*>(
               &_makeOrderRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(makeOrderRsp& a, makeOrderRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(makeOrderRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(makeOrderRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  makeOrderRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<makeOrderRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const makeOrderRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const makeOrderRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(makeOrderRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "makeOrderRsp";
  }
  protected:
  explicit makeOrderRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kOrderIdFieldNumber = 4,
    kRetCodeFieldNumber = 1,
    kReqNoFieldNumber = 3,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_info();
  PROTOBUF_NODISCARD std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // string order_id = 4;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // int32 req_no = 3;
  void clear_req_no();
  int32_t req_no() const;
  void set_req_no(int32_t value);
  private:
  int32_t _internal_req_no() const;
  void _internal_set_req_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:makeOrderRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  int32_t ret_code_;
  int32_t req_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fserver_2eproto;
};
// -------------------------------------------------------------------

class deleteOrderReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deleteOrderReq) */ {
 public:
  inline deleteOrderReq() : deleteOrderReq(nullptr) {}
  ~deleteOrderReq() override;
  explicit constexpr deleteOrderReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deleteOrderReq(const deleteOrderReq& from);
  deleteOrderReq(deleteOrderReq&& from) noexcept
    : deleteOrderReq() {
    *this = ::std::move(from);
  }

  inline deleteOrderReq& operator=(const deleteOrderReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteOrderReq& operator=(deleteOrderReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deleteOrderReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const deleteOrderReq* internal_default_instance() {
    return reinterpret_cast<const deleteOrderReq*>(
               &_deleteOrderReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(deleteOrderReq& a, deleteOrderReq& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteOrderReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteOrderReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deleteOrderReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deleteOrderReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deleteOrderReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const deleteOrderReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteOrderReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deleteOrderReq";
  }
  protected:
  explicit deleteOrderReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 2,
    kReqNoFieldNumber = 1,
  };
  // string order_id = 2;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // int32 req_no = 1;
  void clear_req_no();
  int32_t req_no() const;
  void set_req_no(int32_t value);
  private:
  int32_t _internal_req_no() const;
  void _internal_set_req_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:deleteOrderReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  int32_t req_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fserver_2eproto;
};
// -------------------------------------------------------------------

class deleteOrderRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deleteOrderRsp) */ {
 public:
  inline deleteOrderRsp() : deleteOrderRsp(nullptr) {}
  ~deleteOrderRsp() override;
  explicit constexpr deleteOrderRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deleteOrderRsp(const deleteOrderRsp& from);
  deleteOrderRsp(deleteOrderRsp&& from) noexcept
    : deleteOrderRsp() {
    *this = ::std::move(from);
  }

  inline deleteOrderRsp& operator=(const deleteOrderRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteOrderRsp& operator=(deleteOrderRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deleteOrderRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const deleteOrderRsp* internal_default_instance() {
    return reinterpret_cast<const deleteOrderRsp*>(
               &_deleteOrderRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(deleteOrderRsp& a, deleteOrderRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteOrderRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteOrderRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deleteOrderRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deleteOrderRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deleteOrderRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const deleteOrderRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteOrderRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deleteOrderRsp";
  }
  protected:
  explicit deleteOrderRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kOrderIdFieldNumber = 4,
    kRetCodeFieldNumber = 1,
    kReqNoFieldNumber = 3,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_info();
  PROTOBUF_NODISCARD std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // string order_id = 4;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // int32 req_no = 3;
  void clear_req_no();
  int32_t req_no() const;
  void set_req_no(int32_t value);
  private:
  int32_t _internal_req_no() const;
  void _internal_set_req_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:deleteOrderRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  int32_t ret_code_;
  int32_t req_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fserver_2eproto;
};
// ===================================================================

class OrderService_Stub;

class OrderService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline OrderService() {};
 public:
  virtual ~OrderService();

  typedef OrderService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void query_order_detail(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::queryOrderDetailReq* request,
                       ::queryOrderDetailRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void make_order(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::makeOrderReq* request,
                       ::makeOrderRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void delete_order(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::deleteOrderReq* request,
                       ::deleteOrderRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(OrderService);
};

class OrderService_Stub : public OrderService {
 public:
  OrderService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  OrderService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~OrderService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements OrderService ------------------------------------------

  void query_order_detail(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::queryOrderDetailReq* request,
                       ::queryOrderDetailRsp* response,
                       ::google::protobuf::Closure* done);
  void make_order(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::makeOrderReq* request,
                       ::makeOrderRsp* response,
                       ::google::protobuf::Closure* done);
  void delete_order(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::deleteOrderReq* request,
                       ::deleteOrderRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(OrderService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// queryOrderDetailReq

// int32 req_no = 1;
inline void queryOrderDetailReq::clear_req_no() {
  req_no_ = 0;
}
inline int32_t queryOrderDetailReq::_internal_req_no() const {
  return req_no_;
}
inline int32_t queryOrderDetailReq::req_no() const {
  // @@protoc_insertion_point(field_get:queryOrderDetailReq.req_no)
  return _internal_req_no();
}
inline void queryOrderDetailReq::_internal_set_req_no(int32_t value) {
  
  req_no_ = value;
}
inline void queryOrderDetailReq::set_req_no(int32_t value) {
  _internal_set_req_no(value);
  // @@protoc_insertion_point(field_set:queryOrderDetailReq.req_no)
}

// string order_id = 2;
inline void queryOrderDetailReq::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& queryOrderDetailReq::order_id() const {
  // @@protoc_insertion_point(field_get:queryOrderDetailReq.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void queryOrderDetailReq::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:queryOrderDetailReq.order_id)
}
inline std::string* queryOrderDetailReq::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:queryOrderDetailReq.order_id)
  return _s;
}
inline const std::string& queryOrderDetailReq::_internal_order_id() const {
  return order_id_.Get();
}
inline void queryOrderDetailReq::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* queryOrderDetailReq::_internal_mutable_order_id() {
  
  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* queryOrderDetailReq::release_order_id() {
  // @@protoc_insertion_point(field_release:queryOrderDetailReq.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void queryOrderDetailReq::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:queryOrderDetailReq.order_id)
}

// -------------------------------------------------------------------

// queryOrderDetailRsp

// int32 ret_code = 1;
inline void queryOrderDetailRsp::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t queryOrderDetailRsp::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t queryOrderDetailRsp::ret_code() const {
  // @@protoc_insertion_point(field_get:queryOrderDetailRsp.ret_code)
  return _internal_ret_code();
}
inline void queryOrderDetailRsp::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void queryOrderDetailRsp::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:queryOrderDetailRsp.ret_code)
}

// string res_info = 2;
inline void queryOrderDetailRsp::clear_res_info() {
  res_info_.ClearToEmpty();
}
inline const std::string& queryOrderDetailRsp::res_info() const {
  // @@protoc_insertion_point(field_get:queryOrderDetailRsp.res_info)
  return _internal_res_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void queryOrderDetailRsp::set_res_info(ArgT0&& arg0, ArgT... args) {
 
 res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:queryOrderDetailRsp.res_info)
}
inline std::string* queryOrderDetailRsp::mutable_res_info() {
  std::string* _s = _internal_mutable_res_info();
  // @@protoc_insertion_point(field_mutable:queryOrderDetailRsp.res_info)
  return _s;
}
inline const std::string& queryOrderDetailRsp::_internal_res_info() const {
  return res_info_.Get();
}
inline void queryOrderDetailRsp::_internal_set_res_info(const std::string& value) {
  
  res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* queryOrderDetailRsp::_internal_mutable_res_info() {
  
  return res_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* queryOrderDetailRsp::release_res_info() {
  // @@protoc_insertion_point(field_release:queryOrderDetailRsp.res_info)
  return res_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void queryOrderDetailRsp::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (res_info_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    res_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:queryOrderDetailRsp.res_info)
}

// int32 req_no = 3;
inline void queryOrderDetailRsp::clear_req_no() {
  req_no_ = 0;
}
inline int32_t queryOrderDetailRsp::_internal_req_no() const {
  return req_no_;
}
inline int32_t queryOrderDetailRsp::req_no() const {
  // @@protoc_insertion_point(field_get:queryOrderDetailRsp.req_no)
  return _internal_req_no();
}
inline void queryOrderDetailRsp::_internal_set_req_no(int32_t value) {
  
  req_no_ = value;
}
inline void queryOrderDetailRsp::set_req_no(int32_t value) {
  _internal_set_req_no(value);
  // @@protoc_insertion_point(field_set:queryOrderDetailRsp.req_no)
}

// string order_id = 4;
inline void queryOrderDetailRsp::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& queryOrderDetailRsp::order_id() const {
  // @@protoc_insertion_point(field_get:queryOrderDetailRsp.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void queryOrderDetailRsp::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:queryOrderDetailRsp.order_id)
}
inline std::string* queryOrderDetailRsp::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:queryOrderDetailRsp.order_id)
  return _s;
}
inline const std::string& queryOrderDetailRsp::_internal_order_id() const {
  return order_id_.Get();
}
inline void queryOrderDetailRsp::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* queryOrderDetailRsp::_internal_mutable_order_id() {
  
  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* queryOrderDetailRsp::release_order_id() {
  // @@protoc_insertion_point(field_release:queryOrderDetailRsp.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void queryOrderDetailRsp::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:queryOrderDetailRsp.order_id)
}

// string goods_name = 5;
inline void queryOrderDetailRsp::clear_goods_name() {
  goods_name_.ClearToEmpty();
}
inline const std::string& queryOrderDetailRsp::goods_name() const {
  // @@protoc_insertion_point(field_get:queryOrderDetailRsp.goods_name)
  return _internal_goods_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void queryOrderDetailRsp::set_goods_name(ArgT0&& arg0, ArgT... args) {
 
 goods_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:queryOrderDetailRsp.goods_name)
}
inline std::string* queryOrderDetailRsp::mutable_goods_name() {
  std::string* _s = _internal_mutable_goods_name();
  // @@protoc_insertion_point(field_mutable:queryOrderDetailRsp.goods_name)
  return _s;
}
inline const std::string& queryOrderDetailRsp::_internal_goods_name() const {
  return goods_name_.Get();
}
inline void queryOrderDetailRsp::_internal_set_goods_name(const std::string& value) {
  
  goods_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* queryOrderDetailRsp::_internal_mutable_goods_name() {
  
  return goods_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* queryOrderDetailRsp::release_goods_name() {
  // @@protoc_insertion_point(field_release:queryOrderDetailRsp.goods_name)
  return goods_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void queryOrderDetailRsp::set_allocated_goods_name(std::string* goods_name) {
  if (goods_name != nullptr) {
    
  } else {
    
  }
  goods_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goods_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (goods_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    goods_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:queryOrderDetailRsp.goods_name)
}

// string user_name = 6;
inline void queryOrderDetailRsp::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& queryOrderDetailRsp::user_name() const {
  // @@protoc_insertion_point(field_get:queryOrderDetailRsp.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void queryOrderDetailRsp::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:queryOrderDetailRsp.user_name)
}
inline std::string* queryOrderDetailRsp::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:queryOrderDetailRsp.user_name)
  return _s;
}
inline const std::string& queryOrderDetailRsp::_internal_user_name() const {
  return user_name_.Get();
}
inline void queryOrderDetailRsp::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* queryOrderDetailRsp::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* queryOrderDetailRsp::release_user_name() {
  // @@protoc_insertion_point(field_release:queryOrderDetailRsp.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void queryOrderDetailRsp::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:queryOrderDetailRsp.user_name)
}

// -------------------------------------------------------------------

// makeOrderReq

// int32 req_no = 1;
inline void makeOrderReq::clear_req_no() {
  req_no_ = 0;
}
inline int32_t makeOrderReq::_internal_req_no() const {
  return req_no_;
}
inline int32_t makeOrderReq::req_no() const {
  // @@protoc_insertion_point(field_get:makeOrderReq.req_no)
  return _internal_req_no();
}
inline void makeOrderReq::_internal_set_req_no(int32_t value) {
  
  req_no_ = value;
}
inline void makeOrderReq::set_req_no(int32_t value) {
  _internal_set_req_no(value);
  // @@protoc_insertion_point(field_set:makeOrderReq.req_no)
}

// string user = 2;
inline void makeOrderReq::clear_user() {
  user_.ClearToEmpty();
}
inline const std::string& makeOrderReq::user() const {
  // @@protoc_insertion_point(field_get:makeOrderReq.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void makeOrderReq::set_user(ArgT0&& arg0, ArgT... args) {
 
 user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:makeOrderReq.user)
}
inline std::string* makeOrderReq::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:makeOrderReq.user)
  return _s;
}
inline const std::string& makeOrderReq::_internal_user() const {
  return user_.Get();
}
inline void makeOrderReq::_internal_set_user(const std::string& value) {
  
  user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* makeOrderReq::_internal_mutable_user() {
  
  return user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* makeOrderReq::release_user() {
  // @@protoc_insertion_point(field_release:makeOrderReq.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void makeOrderReq::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:makeOrderReq.user)
}

// string goods_name = 3;
inline void makeOrderReq::clear_goods_name() {
  goods_name_.ClearToEmpty();
}
inline const std::string& makeOrderReq::goods_name() const {
  // @@protoc_insertion_point(field_get:makeOrderReq.goods_name)
  return _internal_goods_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void makeOrderReq::set_goods_name(ArgT0&& arg0, ArgT... args) {
 
 goods_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:makeOrderReq.goods_name)
}
inline std::string* makeOrderReq::mutable_goods_name() {
  std::string* _s = _internal_mutable_goods_name();
  // @@protoc_insertion_point(field_mutable:makeOrderReq.goods_name)
  return _s;
}
inline const std::string& makeOrderReq::_internal_goods_name() const {
  return goods_name_.Get();
}
inline void makeOrderReq::_internal_set_goods_name(const std::string& value) {
  
  goods_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* makeOrderReq::_internal_mutable_goods_name() {
  
  return goods_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* makeOrderReq::release_goods_name() {
  // @@protoc_insertion_point(field_release:makeOrderReq.goods_name)
  return goods_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void makeOrderReq::set_allocated_goods_name(std::string* goods_name) {
  if (goods_name != nullptr) {
    
  } else {
    
  }
  goods_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goods_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (goods_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    goods_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:makeOrderReq.goods_name)
}

// string pay_amount = 4;
inline void makeOrderReq::clear_pay_amount() {
  pay_amount_.ClearToEmpty();
}
inline const std::string& makeOrderReq::pay_amount() const {
  // @@protoc_insertion_point(field_get:makeOrderReq.pay_amount)
  return _internal_pay_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void makeOrderReq::set_pay_amount(ArgT0&& arg0, ArgT... args) {
 
 pay_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:makeOrderReq.pay_amount)
}
inline std::string* makeOrderReq::mutable_pay_amount() {
  std::string* _s = _internal_mutable_pay_amount();
  // @@protoc_insertion_point(field_mutable:makeOrderReq.pay_amount)
  return _s;
}
inline const std::string& makeOrderReq::_internal_pay_amount() const {
  return pay_amount_.Get();
}
inline void makeOrderReq::_internal_set_pay_amount(const std::string& value) {
  
  pay_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* makeOrderReq::_internal_mutable_pay_amount() {
  
  return pay_amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* makeOrderReq::release_pay_amount() {
  // @@protoc_insertion_point(field_release:makeOrderReq.pay_amount)
  return pay_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void makeOrderReq::set_allocated_pay_amount(std::string* pay_amount) {
  if (pay_amount != nullptr) {
    
  } else {
    
  }
  pay_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pay_amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pay_amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pay_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:makeOrderReq.pay_amount)
}

// -------------------------------------------------------------------

// makeOrderRsp

// int32 ret_code = 1;
inline void makeOrderRsp::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t makeOrderRsp::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t makeOrderRsp::ret_code() const {
  // @@protoc_insertion_point(field_get:makeOrderRsp.ret_code)
  return _internal_ret_code();
}
inline void makeOrderRsp::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void makeOrderRsp::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:makeOrderRsp.ret_code)
}

// string res_info = 2;
inline void makeOrderRsp::clear_res_info() {
  res_info_.ClearToEmpty();
}
inline const std::string& makeOrderRsp::res_info() const {
  // @@protoc_insertion_point(field_get:makeOrderRsp.res_info)
  return _internal_res_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void makeOrderRsp::set_res_info(ArgT0&& arg0, ArgT... args) {
 
 res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:makeOrderRsp.res_info)
}
inline std::string* makeOrderRsp::mutable_res_info() {
  std::string* _s = _internal_mutable_res_info();
  // @@protoc_insertion_point(field_mutable:makeOrderRsp.res_info)
  return _s;
}
inline const std::string& makeOrderRsp::_internal_res_info() const {
  return res_info_.Get();
}
inline void makeOrderRsp::_internal_set_res_info(const std::string& value) {
  
  res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* makeOrderRsp::_internal_mutable_res_info() {
  
  return res_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* makeOrderRsp::release_res_info() {
  // @@protoc_insertion_point(field_release:makeOrderRsp.res_info)
  return res_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void makeOrderRsp::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (res_info_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    res_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:makeOrderRsp.res_info)
}

// int32 req_no = 3;
inline void makeOrderRsp::clear_req_no() {
  req_no_ = 0;
}
inline int32_t makeOrderRsp::_internal_req_no() const {
  return req_no_;
}
inline int32_t makeOrderRsp::req_no() const {
  // @@protoc_insertion_point(field_get:makeOrderRsp.req_no)
  return _internal_req_no();
}
inline void makeOrderRsp::_internal_set_req_no(int32_t value) {
  
  req_no_ = value;
}
inline void makeOrderRsp::set_req_no(int32_t value) {
  _internal_set_req_no(value);
  // @@protoc_insertion_point(field_set:makeOrderRsp.req_no)
}

// string order_id = 4;
inline void makeOrderRsp::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& makeOrderRsp::order_id() const {
  // @@protoc_insertion_point(field_get:makeOrderRsp.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void makeOrderRsp::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:makeOrderRsp.order_id)
}
inline std::string* makeOrderRsp::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:makeOrderRsp.order_id)
  return _s;
}
inline const std::string& makeOrderRsp::_internal_order_id() const {
  return order_id_.Get();
}
inline void makeOrderRsp::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* makeOrderRsp::_internal_mutable_order_id() {
  
  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* makeOrderRsp::release_order_id() {
  // @@protoc_insertion_point(field_release:makeOrderRsp.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void makeOrderRsp::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:makeOrderRsp.order_id)
}

// -------------------------------------------------------------------

// deleteOrderReq

// int32 req_no = 1;
inline void deleteOrderReq::clear_req_no() {
  req_no_ = 0;
}
inline int32_t deleteOrderReq::_internal_req_no() const {
  return req_no_;
}
inline int32_t deleteOrderReq::req_no() const {
  // @@protoc_insertion_point(field_get:deleteOrderReq.req_no)
  return _internal_req_no();
}
inline void deleteOrderReq::_internal_set_req_no(int32_t value) {
  
  req_no_ = value;
}
inline void deleteOrderReq::set_req_no(int32_t value) {
  _internal_set_req_no(value);
  // @@protoc_insertion_point(field_set:deleteOrderReq.req_no)
}

// string order_id = 2;
inline void deleteOrderReq::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& deleteOrderReq::order_id() const {
  // @@protoc_insertion_point(field_get:deleteOrderReq.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void deleteOrderReq::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:deleteOrderReq.order_id)
}
inline std::string* deleteOrderReq::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:deleteOrderReq.order_id)
  return _s;
}
inline const std::string& deleteOrderReq::_internal_order_id() const {
  return order_id_.Get();
}
inline void deleteOrderReq::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* deleteOrderReq::_internal_mutable_order_id() {
  
  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* deleteOrderReq::release_order_id() {
  // @@protoc_insertion_point(field_release:deleteOrderReq.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void deleteOrderReq::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:deleteOrderReq.order_id)
}

// -------------------------------------------------------------------

// deleteOrderRsp

// int32 ret_code = 1;
inline void deleteOrderRsp::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t deleteOrderRsp::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t deleteOrderRsp::ret_code() const {
  // @@protoc_insertion_point(field_get:deleteOrderRsp.ret_code)
  return _internal_ret_code();
}
inline void deleteOrderRsp::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void deleteOrderRsp::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:deleteOrderRsp.ret_code)
}

// string res_info = 2;
inline void deleteOrderRsp::clear_res_info() {
  res_info_.ClearToEmpty();
}
inline const std::string& deleteOrderRsp::res_info() const {
  // @@protoc_insertion_point(field_get:deleteOrderRsp.res_info)
  return _internal_res_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void deleteOrderRsp::set_res_info(ArgT0&& arg0, ArgT... args) {
 
 res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:deleteOrderRsp.res_info)
}
inline std::string* deleteOrderRsp::mutable_res_info() {
  std::string* _s = _internal_mutable_res_info();
  // @@protoc_insertion_point(field_mutable:deleteOrderRsp.res_info)
  return _s;
}
inline const std::string& deleteOrderRsp::_internal_res_info() const {
  return res_info_.Get();
}
inline void deleteOrderRsp::_internal_set_res_info(const std::string& value) {
  
  res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* deleteOrderRsp::_internal_mutable_res_info() {
  
  return res_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* deleteOrderRsp::release_res_info() {
  // @@protoc_insertion_point(field_release:deleteOrderRsp.res_info)
  return res_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void deleteOrderRsp::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (res_info_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    res_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:deleteOrderRsp.res_info)
}

// int32 req_no = 3;
inline void deleteOrderRsp::clear_req_no() {
  req_no_ = 0;
}
inline int32_t deleteOrderRsp::_internal_req_no() const {
  return req_no_;
}
inline int32_t deleteOrderRsp::req_no() const {
  // @@protoc_insertion_point(field_get:deleteOrderRsp.req_no)
  return _internal_req_no();
}
inline void deleteOrderRsp::_internal_set_req_no(int32_t value) {
  
  req_no_ = value;
}
inline void deleteOrderRsp::set_req_no(int32_t value) {
  _internal_set_req_no(value);
  // @@protoc_insertion_point(field_set:deleteOrderRsp.req_no)
}

// string order_id = 4;
inline void deleteOrderRsp::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& deleteOrderRsp::order_id() const {
  // @@protoc_insertion_point(field_get:deleteOrderRsp.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void deleteOrderRsp::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:deleteOrderRsp.order_id)
}
inline std::string* deleteOrderRsp::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:deleteOrderRsp.order_id)
  return _s;
}
inline const std::string& deleteOrderRsp::_internal_order_id() const {
  return order_id_.Get();
}
inline void deleteOrderRsp::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* deleteOrderRsp::_internal_mutable_order_id() {
  
  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* deleteOrderRsp::release_order_id() {
  // @@protoc_insertion_point(field_release:deleteOrderRsp.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void deleteOrderRsp::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:deleteOrderRsp.order_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_order_5fserver_2eproto
