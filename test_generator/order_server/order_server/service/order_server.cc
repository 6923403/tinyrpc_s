/*************************************************************
 * 
 *  #####   ###   #     #    #		 #     #####    #####     ####
 *    #			 #    #	#	  #			#		#			 #  #	  	#		#		 #
 *    #			 #    #		# #				#				 ###			#####    #		
 *    #			###   #		  #				#				 #   #		#					####
 *
 * order_server.cc
 * Generated by tinyrpc framework tinyrpc_generator.py
 * Create Time: 2023-08-11 22:59:02
 * This file will be overwrite every time
*************************************************************/


#include <google/protobuf/service.h>
#include <exception>
#include "tinyrpc/comm/log.h"
#include "order_server/pb/order_server.pb.h"
#include "order_server/service/order_server.h"
#include "order_server/comm/business_exception.h"
#include "order_server/interface/query_order_detail.h"
#include "order_server/interface/make_order.h"
#include "order_server/interface/delete_order.h"


#define CALL_RPC_INTERFACE(type)                                                                                                    \
  type impl(*request, *response);                                                                                                   \
  try {                                                                                                                             \
    AppInfoLog << "In|request:{" << request->ShortDebugString() << "}";                                                             \
    impl.run();                                                                                                                     \
    response->set_ret_code(0);                                                                                                      \
    response->set_res_info("OK");                                                                                                   \
    AppInfoLog << "Out|response:{" << response->ShortDebugString() << "}";                                                          \
  } catch (order_server::BusinessException& e) {                                                                                 \
    AppErrorLog << "[" << e.file_name() << ":" << e.line() << "] occur BusinessException, error code = "                            \
      << e.code() << ", errinfo = " << e.error();                                                                                   \
    response->set_ret_code(e.code());                                                                                               \
    response->set_res_info(e.error());                                                                                              \
    AppInfoLog << "Out|response:{" << response->ShortDebugString() << "}";                                                          \
  } catch (std::exception&) {                                                                                                       \
    AppErrorLog << "occur std::exception, error code = -1, errorinfo = UnKnown error ";                                             \
    response->set_ret_code(-1);                                                                                                     \
    response->set_res_info("UnKnown error");                                                                                        \
    AppInfoLog << "Out|response:{" << response->ShortDebugString() << "}";                                                          \
  } catch (...) {                                                                                                                   \
    AppErrorLog << "occur UnKnown exception, error code = -1, errorinfo = UnKnown error ";                                          \
    response->set_ret_code(-1);                                                                                                     \
    response->set_res_info("UnKnown error");                                                                                        \
    AppInfoLog << "Out|response:{" << response->ShortDebugString() << "}";                                                          \
  }                                                                                                                                 \
  if (done) {                                                                                                                       \
    done->Run();                                                                                                                    \
  }                                                                                                                                 \

namespace order_server {

void OrderServiceImpl::query_order_detail(::google::protobuf::RpcController* controller,
                       const ::queryOrderDetailReq* request,
                       ::queryOrderDetailRsp* response,
                       ::google::protobuf::Closure* done){

  CALL_RPC_INTERFACE(QueryOrderDetailInterface);
}

void OrderServiceImpl::make_order(::google::protobuf::RpcController* controller,
                       const ::makeOrderReq* request,
                       ::makeOrderRsp* response,
                       ::google::protobuf::Closure* done){

  CALL_RPC_INTERFACE(MakeOrderInterface);
}

void OrderServiceImpl::delete_order(::google::protobuf::RpcController* controller,
                       const ::deleteOrderReq* request,
                       ::deleteOrderRsp* response,
                       ::google::protobuf::Closure* done){

  CALL_RPC_INTERFACE(DeleteOrderInterface);
}



}